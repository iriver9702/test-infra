plank:
  # used to link to job results for non decorated jobs (without pod utilities)
  job_url_template: 'https://prow.cloudminds.com:31008/view/mem/prow-logs/pull/{{.Spec.Refs.Repo}}/{{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}}/{{.Spec.Job}}/{{.Status.BuildID}}'
  report_template: '[Full PR test history](https://prow.cloudminds.com:31008/pr-history?org={{.Spec.Refs.Org}}&repo={{.Spec.Refs.Repo}}&pr={{with index .Spec.Refs.Pulls 0}}{{.Number}}{{end}})'  
  job_url_prefix_config:
    '*': https://prow.cloudminds.com:31008/view/
  pod_pending_timeout: 15m
  pod_unscheduled_timeout: 5m
  default_decoration_configs:
    '*':
      timeout: 2h
      grace_period: 15m
      utility_images:
        clonerefs: "zhanghe:5000/k8s-prow/clonerefs:v20200924-e60bf413ff"
        initupload: "zhanghe:5000/k8s-prow/initupload:v20200924-e60bf413ff"
        entrypoint: "zhanghe:5000/k8s-prow/entrypoint:v20200924-e60bf413ff"
        sidecar: "zhanghe:5000/k8s-prow/sidecar:v20200924-e60bf413ff"
      gcs_configuration:
        bucket: mem://prow-logs
        path_strategy: explicit
        default_org: "iriver9702"
        default_repo: "readygo"
      s3_credentials_secret: s3-credentials
      resources:
        clonerefs:
          requests:
            cpu: 100m
        initupload:
          requests:
            cpu: 100m
        place_entrypoint:
          requests:
            cpu: 100m
        sidecar:
          requests:
            cpu: 100m

sinker:
  resync_period: 1m
  max_prowjob_age: 48h
  max_pod_age: 48h
  terminated_pod_ttl: 30m

deck:
  spyglass:
    # size_limit: 500000000 # 500MB
    # gcs_browser_prefix: https://gcsweb.cloudminds.com/gcs/
    # testgrid_config: s3://rook-ceph-rgw-my-store.rook-ceph/rookbucket/config
    # testgrid_root: https://prow.cloudminds.com:31008/
    lenses:
    - lens:
        name: metadata
      required_files:
      - started.json|finished.json
      optional_files:
      - podinfo.json|prowjob.json
    - lens:
        name: buildlog
      required_files:
        - ^.*build-log\.txt$
    - lens:
        name: junit
      required_files:
        - artifacts/junit.*\.xml
    - lens:
        name: coverage
      required_files:
        - artifacts/filtered.cov
      optional_files:
        - artifacts/filtered.html
    - lens:
        name: podinfo
      required_files:
        - podinfo.json
  tide_update_period: 1s
  hidden_repos:
  - react-with-bootstrap4
  # google_analytics: UA-82843984-5
  rerun_auth_configs:
    '*':
      github_team_ids:
      - 4110120 # test-infra-admins

prowjob_namespace: default
pod_namespace: test-pods
log_level: info

managed_webhooks:
  # This has to be true if any of the managed repo/org is using the legacy global token that is manually created.
  respect_legacy_global_token: true
  # Config for orgs and repos that have been onboarded to this Prow instance.
  org_repo_config:
    iriver9702:
      token_created_after: 2020-08-12T00:00:00Z

slack_reporter_configs:
  '*':
    job_types_to_report:
      - postsubmit
      - periodic
      - batch
    job_states_to_report:
      - failure
      - error
    channel: test-failures
    # The template shown below is the default
    report_template: 'Job {{.Spec.Job}} of type {{.Spec.Type}} ended with state {{.Status.State}}. <{{.Status.URL}}|View logs>'

branch-protection:
  allow_disabled_policies: true  
  orgs:
    iriver9702:
      protect: false
      exclude:
        - "^revert-" # don't protect revert branches
      repos:
        readygo:
          restrictions:
            users: []
            teams:
            - stage-bots
          required_status_checks:
            contexts:
            - continuous-integration/travis-ci/pr
          required_pull_request_reviews:
            required_approving_review_count: 1
        kubernetes:
          restrictions: # only allow admins
            users: []
            teams: []
          protect: false
          branches:
            master:
              protect: true
            dev-1.18:
              protect: true
            release-1.4:
              protect: true
            release-1.5:
              protect: true
            release-1.6:
              protect: true
            release-1.7:
              protect: true
            release-1.8:
              protect: true
            release-1.9:
              protect: true
            release-1.10:
              protect: true
            release-1.11:
              protect: true
            release-1.12:
              protect: true
            release-1.13:
              protect: true
            release-1.14:
              protect: true
            release-1.15:
              protect: true
            release-1.16:
              protect: true
            release-1.17:
              protect: true

tide:
  sync_period: 2m
  queries:
  - orgs:
    - iriver9702
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge
    - do-not-merge/hold
    - do-not-merge/invalid-owners-file
    - do-not-merge/work-in-progress
    - needs-rebase
  - repos:
    - iriver9702/readygo
    labels:
    - lgtm
    - approved
    - "Contribution Allowed"
    missingLabels:
    - do-not-merge
    - do-not-merge/blocked-paths
    - do-not-merge/hold
    - do-not-merge/invalid-owners-file
    - do-not-merge/work-in-progress
    - needs-rebase
  - repos:
    - iriver9702/kubernetes
    excludedBranches:
    - release-1.19
    labels:
    - lgtm
    - approved
    missingLabels:
    - do-not-merge
    - do-not-merge/blocked-paths
    - do-not-merge/cherry-pick-not-approved
    - do-not-merge/hold
    - do-not-merge/invalid-commit-message
    - do-not-merge/invalid-owners-file
    - do-not-merge/release-note-label-needed
    - do-not-merge/work-in-progress
    - needs-kind
    - needs-rebase
    - needs-sig

  merge_method:
    iriver9702/kubernetes: squash
    iriver9702/readygo: squash

  merge_commit_template:
    iriver9702:
      title: "{{ .Title }} (#{{ .Number }})"
  pr_status_base_urls:
    '*': https://prow.cloudminds.com:31008/pr
  blocker_label: tide/merge-blocker
  squash_label: tide/merge-method-squash
  rebase_label: tide/merge-method-rebase
  merge_label: tide/merge-method-merge
  context_options:
    orgs:
      zhagnhe9702:
        repos:
          readygo:
            from-branch-protection: true
  batch_size_limit:
    "iriver9702/kubernetes": 15

push_gateway:
  endpoint: pushgateway
  serve_metrics: true

github_reporter:
  job_types_to_report:
  - presubmit
  - postsubmit

presets:
# credential presets
- labels:
    preset-service-account: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  # storage e2e tests borrow this as a preconfigured key instead of creating and
  # injecting a new key. this allows us to avoid mass key download warnings
  - name: E2E_GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  - name: GOOGLE_APPLICATION_CREDENTIALS_DEPRECATED
    value: "Migrate to workload identity, contact sig-testing"
  volumes:
  - name: service
    secret:
      secretName: service-account
  volumeMounts:
  - name: service
    mountPath: /etc/service-account
    readOnly: true
- labels:
    preset-gke-alpha-service: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  - name: GOOGLE_APPLICATION_CREDENTIALS_DEPRECATED
    value: "Migrate to workload identity, contact sig-testing"
  # storage e2e tests borrow this as a preconfigured key instead of creating and
  # injecting a new key. this allows us to avoid mass key download warnings
  - name: E2E_GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  volumes:
  - name: service
    secret:
      secretName: gke-alpha-service-account
  volumeMounts:
  - name: service
    mountPath: /etc/service-account
    readOnly: true
- labels:
    preset-istio-service: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/istio-service-account.json
  - name: GOOGLE_APPLICATION_CREDENTIALS_DEPRECATED
    value: "Migrate to workload identity, contact sig-testing"
  # storage e2e tests borrow this as a preconfigured key instead of creating and
  # injecting a new key. this allows us to avoid mass key download warnings
  - name: E2E_GOOGLE_APPLICATION_CREDENTIALS
    value: /etc/service-account/service-account.json
  volumes:
  - name: service
    secret:
      secretName: istio-service-account
  volumeMounts:
  - name: service
    mountPath: /etc/service-account
    readOnly: true
- labels:
    preset-k8s-ssh: "true"
  env:
  - name: USER
    value: prow
  - name: JENKINS_GCE_SSH_PRIVATE_KEY_FILE
    value: /etc/ssh-key-secret/ssh-private
  - name: JENKINS_GCE_SSH_PUBLIC_KEY_FILE
    value: /etc/ssh-key-secret/ssh-public
  volumes:
  - name: ssh
    secret:
      defaultMode: 0400
      secretName: ssh-key-secret
  volumeMounts:
  - name: ssh
    mountPath: /etc/ssh-key-secret
    readOnly: true
- labels:
    preset-aws-ssh: "true"
  env:
  - name: USER
    value: prow
  - name: AWS_SSH_PRIVATE_KEY_FILE
    value: /etc/aws-ssh/aws-ssh-private
  - name: AWS_SSH_PUBLIC_KEY_FILE
    value: /etc/aws-ssh/aws-ssh-public
  volumes:
  - name: aws-ssh
    secret:
      defaultMode: 0400
      secretName: aws-ssh-key-secret
  volumeMounts:
  - name: aws-ssh
    mountPath: /etc/aws-ssh
    readOnly: true
- labels:
    preset-windows-private-registry-cred: "true"
  env:
  - name: DOCKER_CONFIG_FILE
    value: /etc/docker-cred/config.json
  volumes:
  - name: windows-private-registry-cred
    secret:
      secretName: windows-private-registry-docker-config
  volumeMounts:
  - name: windows-private-registry-cred
    mountPath: /etc/docker-cred/
    readOnly: true
- labels:
    preset-azure-cred: "true"
  env:
  - name: AZURE_CREDENTIALS
    value: /etc/azure-cred/credentials
  - name: AZURE_SSH_PUBLIC_KEY_FILE
    value: /etc/azure-ssh/azure-ssh-pub
  - name: REGISTRY
    value: k8sprow.azurecr.io
  - name: KUBE_VERBOSE
    value: "0"
  - name: AZ_STORAGE_CONTAINER_NAME
    value: mystoragecontainer
  volumes:
  - name: azure-cred
    secret:
      secretName: azure-cred
  - name: azure-ssh
    secret:
      secretName: azure-ssh
  volumeMounts:
  - name: azure-cred
    mountPath: /etc/azure-cred
    readOnly: true
  - name: azure-ssh
    mountPath: /etc/azure-ssh
    readOnly: true
- labels:
    preset-azure-anonymous-pull: "true"
  env:
    - name: REGISTRY
      value: capzci.azurecr.io
- labels:
    preset-azure-cred-only: "true"
  env:
    - name: AZURE_CREDENTIALS
      value: /etc/azure-cred/credentials
    - name: AZURE_SSH_PUBLIC_KEY_FILE
      value: /etc/azure-ssh/azure-ssh-pub
  volumes:
    - name: azure-cred
      secret:
        secretName: azure-cred
    - name: azure-ssh
      secret:
        secretName: azure-ssh
  volumeMounts:
    - name: azure-cred
      mountPath: /etc/azure-cred
      readOnly: true
    - name: azure-ssh
      mountPath: /etc/azure-ssh
      readOnly: true
# storage / caching presets
- labels:
    preset-bazel-scratch-dir: "true"
  env:
  - name: TEST_TMPDIR
    value: /bazel-scratch/.cache/bazel
  volumes:
  - name: bazel-scratch
    emptyDir: {}
  volumeMounts:
  - name: bazel-scratch
    mountPath: /bazel-scratch/.cache
- labels:
    preset-bazel-remote-cache-enabled: "true"
  env:
  - name: BAZEL_REMOTE_CACHE_ENABLED
    value: "true"
# docker-in-docker (with images/bootstrap) preset
# NOTE: using this also requires using that image,
# ensuring you run your test under either the ENTRYPOINT or:
# /usr/local/bin/runner.sh my-test-command --foo --bar
# AND setting the following on your PodSpec:
# securityContext:
#   privileged: true
- labels:
    preset-dind-enabled: "true"
  env:
  - name: DOCKER_IN_DOCKER_ENABLED
    value: "true"
  volumes:
  # kubekins-e2e legacy path
  - name: docker-graph
    emptyDir: {}
  # krte (normal) path
  - name: docker-root
    emptyDir: {}
  volumeMounts:
  - name: docker-graph
    mountPath: /docker-graph
  - name: docker-root
    mountPath: /var/lib/docker
# volume mounts for kind
- labels:
    preset-kind-volume-mounts: "true"
  volumeMounts:
    - mountPath: /lib/modules
      name: modules
      readOnly: true
    - mountPath: /sys/fs/cgroup
      name: cgroup
  volumes:
    - name: modules
      hostPath:
        path: /lib/modules
        type: Directory
    - name: cgroup
      hostPath:
        path: /sys/fs/cgroup
        type: Directory
# enable GOPROXY by default
- env:
  - name: GOPROXY
    value: "https://proxy.golang.org"
